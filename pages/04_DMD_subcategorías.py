# Importar las bibliotecas necesarias
import streamlit as st
from utils.plot_df import *
from utils.do_df import download_dataframe

# Configurar la p√°gina de Streamlit
st.set_page_config(
    page_title="Scorecard Software",  # T√≠tulo de la p√°gina
    page_icon="üèóÔ∏è",  # √çcono de la p√°gina
    layout="wide"  # Dise√±o de la p√°gina
)

#if not st.session_state.get("response", False):
#    st.error("Los datos no est√°n disponibles. Completa el proceso de ingreso de datos para acceder a esta p√°gina.")
#    st.stop()

def main():
    # Comprueba el estado de autenticaci√≥n del usuario
    if st.session_state["authentication_status"] is False:
        # Muestra un mensaje de error si la autenticaci√≥n es incorrecta
        st.error('Usuario/contrase√±a incorrecto')
    elif st.session_state["authentication_status"] is None:
        # Muestra un mensaje de advertencia si a√∫n no se ha ingresado usuario y contrase√±a
        st.warning('Por favor ingresa tu usuario y contrase√±a')
    elif st.session_state["authentication_status"]:
        # Si la autenticaci√≥n es exitosa, muestra el contenido principal
        
        # T√≠tulo principal de la aplicaci√≥n 
        st.title("Data mining drivers por subcategor√≠a")
    
        # Transforma los datos de la base de datos utilizando funciones del m√≥dulo "backend"
        saved_database = st.session_state["response"]

        # Calcula una tabla de valores pivotantes por categor√≠a de producto en base a la funci√≥n del backend
        produc_table = pivot_value_table(saved_database, "subcat_producto")

        # Calcula una tabla de porcentajes a partir de la tabla anterior
        percent_produc_table = pivot_percent_table(produc_table)

        # Expansor para mostrar c√°lculo de drivers por categor√≠a
        with st.expander("C√°lculo de drivers por categor√≠a"):
            # Crea dos pesta√±as para mostrar la tabla y permitir la exportaci√≥n
            tab_1, tab_2 = st.tabs(["Tabla üìÑ", "Exportar üìÅ"])
            with tab_1:
                # Muestra la tabla de valores pivotantes
                show_pivot_value_table(produc_table)
            with tab_2:
                # Permite la descarga de la tabla en formato de archivo
                download_dataframe(produc_table, name="drivers_por_categoria")

        # Expansor para mostrar el porcentaje de drivers por categor√≠a
        with st.expander("Porcentaje de drivers por categor√≠a"):
            # Crea dos pesta√±as para mostrar la tabla y permitir la exportaci√≥n
            tab_1, tab_2 = st.tabs(["Tabla üìÑ", "Exportar üìÅ"])
            with tab_1:
                # Muestra la tabla de porcentajes
                show_pivot_percent_table(percent_produc_table)
            with tab_2:
                # Permite la descarga de la tabla de porcentajes en formato de archivo
                download_dataframe(percent_produc_table, name="drivers_por_categoria_porcentaje") 

        # Muestra un gr√°fico de barras basado en la tabla de porcentajes
        show_barchart_dataminnigdrivers(percent_produc_table)
        
if __name__ == '__main__':
    main()
        